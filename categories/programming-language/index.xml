<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming Language on Sơn Lưu Blog</title><link>https://sonlhcsuit.github.io/categories/programming-language/</link><description>Recent content in Programming Language on Sơn Lưu Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 May 2021 20:34:57 +0700</lastBuildDate><atom:link href="https://sonlhcsuit.github.io/categories/programming-language/index.xml" rel="self" type="application/rss+xml"/><item><title>Object Oriented Programing Implementations</title><link>https://sonlhcsuit.github.io/p/oop-implementation/</link><pubDate>Sun, 23 May 2021 20:34:57 +0700</pubDate><guid>https://sonlhcsuit.github.io/p/oop-implementation/</guid><description>Disadvantages of previous paradigms Các phương pháp lập trình trước kia (procedural programming &amp;amp; structured programming) đòi hỏi một sự quản lý cực kỳ chặt chẽ khi code. Tuy nhiên với bản chất của procedural programming là viết nhiều dòng lệnh chạy từ trên xuống thì thực sự có quản lý có tốt tới đâu thì chúng ta vẫn gặp trường hợp bad code khi chương trình trở trên to hơn (nhiều tính năng hơn).</description></item><item><title>Power and logarithms</title><link>https://sonlhcsuit.github.io/p/power/</link><pubDate>Sun, 23 May 2021 19:18:38 +0700</pubDate><guid>https://sonlhcsuit.github.io/p/power/</guid><description>Một trong nhiều vấn đề khá là nan giải (thực ra không phải là nan giải, &amp;ldquo;người ta&amp;rdquo; đã giải quyết nó từ lâu rồi - từ này ở đây với ý nghĩa cách tiếp cận khó khăn) trong lập trình, hoặc toán học đó là phép toán luỹ thừa. Một câu hỏi có thể hay được đặt ra đó là: &amp;ldquo;Làm sao để tính luỹ thừa bậc n của một số bất kỳ?</description></item><item><title>Programming Language History Overview</title><link>https://sonlhcsuit.github.io/p/programming-language-overview/</link><pubDate>Tue, 04 May 2021 08:21:25 +0700</pubDate><guid>https://sonlhcsuit.github.io/p/programming-language-overview/</guid><description>History about Programming Languages &amp;amp; Computer Chúng ta có thể khái quát lịch sử máy tính bằng bài viết khác, nhưng sau thời gian dài phát triển, thì công dụng chủ yếu của máy tính là để tính toán dựa trên input và sinh ra output. Máy tính ở thời điểm ban đầu có kích thước rất to (lớn hơn $100 m^2$), vật đổi sao dời khiến kích thước máy tính giảm dần bởi CPU (Central Processing Unit) - lõi của máy tính càng ngày càng nhỏ dựa vào công nghệ nano.</description></item><item><title>Functions</title><link>https://sonlhcsuit.github.io/p/function/</link><pubDate>Sun, 18 Apr 2021 00:17:35 +0700</pubDate><guid>https://sonlhcsuit.github.io/p/function/</guid><description>Function Function là một khái niệm quan trọng trong nhiều ngôn ngữ lập trình bậc cao. Theo định nghĩa từ toán học thì function là những expression, rules,laws được sử dụng để định nghĩa những relation giữa nhiều dependant variables (biến độc lập). Nói một cách khó hiểu hơn, là một mapping (ánh xạ) từ một giá trị ở miền giá trị này sang một giá trị khác ở miền giá trị khác.</description></item><item><title>Variable</title><link>https://sonlhcsuit.github.io/p/variable/</link><pubDate>Mon, 12 Apr 2021 19:01:17 +0700</pubDate><guid>https://sonlhcsuit.github.io/p/variable/</guid><description>Variable Biến là một khái niệm rất quan trọng trong nhiều ngôn ngữ lập trình, được sử dụng để lưu trữ các giá trị. Chúng ta có thể gán một giá trị cho một biến, khi nào cần giá trị cho việc tính toán (số, chuỗi, etc.) thì sử dụng tên biến thay vì giá trị, các interpreter, compiler truy xuất đến giá trị đã được gán vào biến, thay thế vào biểu thức và thực hiện việc tính toán.</description></item></channel></rss>